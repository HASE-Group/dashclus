//
// Project:	DASH Cluster
// Entity:	Secondary Cache
// File:	s_cache.hase
// Date:	4 Feb 2003

// Originally Written by Lawrence Williams
// Modified Feb 2003 by Roland Ibbett

$class_decls

/* Message containers */

p1_struct pkt_from_p_cache;  // Packet inbound from p_cache.
p1_struct pkt_to_p_cache;    // Packet bound for p_cache.
p1_struct pkt_to_mp_bus;     // Packet bound for mp_bus. 
p1_struct pkt_from_mp_bus;   // Packet inbound from mp_bus.   
p1_struct pkt_outstanding;   // Packet sent to memory
p1_struct pkt_pending;       // Tempory storage buffer for bus bound pkt.
p1_struct wb_pkt_pending;    // ''                           '' write back pkt.
p1_struct inval_pkt_pending; // ''                           '' invalidate pkt.
p1_struct pkt_bus_ack;       // Used to send 'hidden' acks to bus.
p1_struct write_m_inval_pkt; // Hold invalidation details for write misses

/* Vars for cache related calculations         */
/* these are used to caclulate cache positions */
/* etc. via use of entity parameters / globals */                

int S_delay;
int s_cache_size;
int clus_mem_size;
int add_req;                   // Requested address
int cm_block;                  // Cluster memory block in which address resides
int slot;                      // Cache slot for this entry.
int tag;                       // Cache tag for this address.
int tag_boundary;              // Where tag boundarys fall in clus_memory.	
int old_contents;              // Used to store write-back values.
char inst_type;                 // stores if request is for inst/data

char action;                   // Is operation 'r'ead or 'w'rite 
ca_line_struct current_line; // Current cache memory line.
bool refer;                    // referal to memory?
bool bus_request_pending;      // Outstanding request for bus ?
bool wb_pending;               // Outstanding WB?
bool inval_pending;            // Outstanding invalidate?
int  count;                    // misc integer counter - for loops.

void do_mpbus_event(sim_event&);
void do_p_cache_event(sim_event&);
void do_mp_rw(sim_event&);
void do_mp_g(sim_event&);
void do_mp_p(sim_event&);
void do_mp_s(sim_event&);
void do_mp_i(sim_event&);
int  need_write_back(ca_line_struct&);
void send_invalidate(p1_struct);

$class_defs

//#include <iostream.h>
//#include <string.h>

void s_cache::do_mp_i(sim_event &ev){

    int add_request;      // address in probe
    int clus_mem_block;   // cluster memory block address resides in
    int home_slot;        // slot in cache probes refers to
    int invalidate_tag;
    
    ca_line_struct line_to_check; // cache line to check

    /* accept invalidation data and act upon it */

    add_request=pkt_from_mp_bus.p1_address;
    clus_mem_block=(add_request/4);
    home_slot = clus_mem_block % s_cache_size;
    invalidate_tag = (add_request/4) / s_cache_size;

    /* check if we need to invalidate */

    line_to_check = cache.vec[home_slot];

    if (line_to_check.ca_valid != 0){              // Valid entry - check tag
	if (line_to_check.ca_tag==invalidate_tag){ // Valid tag!! - invalidate entry

	    line_to_check.ca_valid=0; // reset cache bits to indicate invalid entry
	    line_to_check.ca_share=0;
	    line_to_check.ca_mod=0;
	    cache.Update(home_slot,line_to_check);
	}
    }
    send_DATAPKT(to_p_cache,pkt_from_mp_bus,17,2);
//    sim_schedule(to_p_cache,0,DATAPKT,SIM_PUT(p1_struct,pkt_from_mp_bus));
}

void s_cache::send_invalidate(p1_struct pkt_in){

    /* Send details of current write operation to bus for */
    /* other caches to snoop then invalidate any matching */
    /* entries they might have.                           */

    // set up outgoing invalidate pkt.

    inval_pkt_pending = pkt_in;
    inval_pkt_pending.p1_id[0]='!';
    inval_pending = true;
}

void s_cache::do_mp_s(sim_event &ev){

    int add_request;      // address in probe
    int clus_mem_block;   // cluster memory block address resides in
    int home_slot;        // slot in cache probes refers to
    int snoop_tag; 
    char snoop_mode;      // r/w/ snoop ?

    ca_line_struct line_to_check; // cache line to check
    snoop_mode = (char) pkt_from_mp_bus.p1_rw[1];
    

    /* send back to arbitor information about current snoop probe */

    add_request=pkt_from_mp_bus.p1_address;
    clus_mem_block=(add_request/4);
    home_slot = clus_mem_block % s_cache_size;
    snoop_tag = (add_request/4)/s_cache_size;

    /* have we got the requested entry in this cache? */

    line_to_check = cache.vec[home_slot];

    pkt_to_mp_bus.p1_address=0;    // not returning an address!!!
    pkt_to_mp_bus.p1_rw[0]  ='R';  // snoop reply

    /* save the state of the share/mod bits for this entry so */
    /* we can show the transition of the snoop display panel  */
  char id3, id4;
    if ((line_to_check.ca_valid != 0)&&(line_to_check.ca_tag==snoop_tag)){
	if (line_to_check.ca_mod != 0){
		id4 = 'M';
	}else{
		id4 = 'U';
	}
	if (line_to_check.ca_share != 0){
		id3 = 'S';
	}else{
		id3 = 'E';
	}
    }else{
	id3 = 'I';
	id4 = '-';
    }

    /* Initial response is INVALID Line           */
    /* we modify this response accordingly below. */

	sprintf(pkt_to_mp_bus.p1_id, "I-(%c%c)-", id3, id4);

    if (line_to_check.ca_valid != 0){   // i.e. line is valid
	if (line_to_check.ca_tag==snoop_tag){   // tags match
	    
	    /* line is valid and tags match, we now therefore alter our   */
	    /* cached copy accordingly - first lets classify snoop of R/w */

	    if (snoop_mode=='r'){     // Snoop resulting from READ

		/* check current cache status and alter accordingly*/

		if ((line_to_check.ca_mod==0) && (line_to_check.ca_share==0)){

		    /* change exclusive-unmod -> shared-unmod */

		    line_to_check.ca_share=1;
		}

		if ((line_to_check.ca_mod==1) && (line_to_check.ca_share==0)){

		    /* change exclusive-mod -> shared-unmod            */
		    /* this requires the e-m chache to write the block */
		    /* back to cluster memory as well as to the other  */
		    /* cache.                                          */

		    line_to_check.ca_share=1;
		    line_to_check.ca_mod=0;
		    pkt_to_mp_bus.p1_id[6]='*';
					// indicates cache writbacke needed
		}


	    }else{                   // 'w' Snoop resulting from WRITE

	    }

	    /* now set repsonse pkts id field */

	    if (line_to_check.ca_share != 0){
		pkt_to_mp_bus.p1_id[0]='S'; // shared
	    }else{
		pkt_to_mp_bus.p1_id[0]='E'; // exclusive
	    }
	    
	    if (line_to_check.ca_mod != 0){
		pkt_to_mp_bus.p1_id[1]='M'; // modified
	    }else{
		pkt_to_mp_bus.p1_id[1]='U'; // unmodified
	    }
	 
        }
    }

    /* update cache memory display */
    cache.Update(home_slot,line_to_check);
    /* now send response packet */

    sim_schedule(to_mp_bus,0,DATAPKT,SIM_PUT(p1_struct,pkt_to_mp_bus));
}


int s_cache::need_write_back(ca_line_struct &line_in){

    if (line_in.ca_mod != 0){
	return 1;
    }else{
	return 0;
    }
}


/****************************************/
/* Handle mp bus initiated r/w packets  */
/****************************************/

void s_cache::do_mp_rw(sim_event &ev){

    /* this event is simply updating the cache with     */
    /* a value from cluster memory or another cache.    */
    add_req=pkt_from_mp_bus.p1_address;			
    cm_block=(add_req/4);
    slot = cm_block % s_cache_size;
    tag = (add_req/4) / s_cache_size;

    // Clear current event status

    status0='_';
    status1='_';
    dump_state();
    current_line.ca_valid=1;
    current_line.ca_tag=tag;
    current_line.ca_cm_block=cm_block;
    current_line.ca_add1=(4*cm_block);
    current_line.ca_add2=(4*cm_block)+1;		
    current_line.ca_add3=(4*cm_block)+2;
    current_line.ca_add4=(4*cm_block)+3;
    
    if (pkt_from_mp_bus.p1_rw[0]=='w'){

	/* have received the resultant memory read of WRITE/MISS */
	/* now send invalidate then update cache as usual        */
	send_invalidate(write_m_inval_pkt);
	current_line.ca_share=0;
	current_line.ca_mod=1;
	cache.Update(slot,current_line);

    }else{

	if ((pkt_from_mp_bus.p1_id[1]=='U')||
                                  (pkt_from_mp_bus.p1_id[1]=='-')){
	    current_line.ca_mod=0;
	}else{
	    current_line.ca_mod=1;
	}
	
	if ((pkt_from_mp_bus.p1_id[0]=='E')||
                                  (pkt_from_mp_bus.p1_id[1]=='I')){
	   current_line.ca_share=0;
	}else{
	    current_line.ca_share=1;
        }
	
	cache.Update(slot,current_line);
    }

    // simulate processing delay
    sim_hold(S_delay);

    pkt_to_p_cache = pkt_from_mp_bus;
    pkt_to_p_cache.p1_id[0]=inst_type;
    pkt_to_p_cache.p1_id[1]=' ';

    send_DATAPKT(to_p_cache,pkt_to_p_cache);

		status0='_';
		status1='_';
		dump_state();
}

/**********************************/
/* Handle mp bus initiated probes */
/******************* **************/

void s_cache::do_mp_g(sim_event &ev){

/* if we have set the bus request pending flag we should inform the bus */
/* note invalidate requests take priority */

    if (inval_pending){
	pkt_bus_ack.p1_address = -2;
	pkt_bus_ack.p1_rw[0]   = 'Y'; // 'y'es we are wanting bus time.
	pkt_bus_ack.p1_id[0]   = ' ';
    }else{
	if (bus_request_pending){
	    pkt_bus_ack.p1_address = -1;
	    pkt_bus_ack.p1_rw[0]   = 'Y'; // 'y'es we are wanting bus time.
	    pkt_bus_ack.p1_id[0]   = ' ';	
	}else{
	    pkt_bus_ack.p1_address = -1;
	    pkt_bus_ack.p1_rw[0]   = 'N'; // 'n'o we dont need bus time.
	    pkt_bus_ack.p1_id[0]   = ' ';	
	}
    }
    sim_schedule(to_mp_bus,0,DATAPKT,SIM_PUT(p1_struct,pkt_bus_ack));  
}

/****************************************/
/* Handle mp bus initiated permissions  */
/****************************************/

void s_cache::do_mp_p(sim_event &ev){
    
/* we have been given permission to use the bus so simply */
/* reset the bus request pending flag and send packet     */

    /* priority of transmission ensures event order : */
    /*                                                */
    /* Highest  1- Invalidate Packet                  */
    /*          2- Write-Back Packet                  */
    /* Lowest   3- bus_request Packet                 */

   
    if (inval_pending){
	pkt_to_mp_bus = inval_pkt_pending;
	send_DATAPKT (to_mp_bus,pkt_to_mp_bus);
	inval_pending = false;
    }else{
	if (wb_pending){
	    pkt_to_mp_bus = wb_pkt_pending;
	    send_DATAPKT (to_mp_bus,pkt_to_mp_bus);
	    wb_pending = false;
	}else{
	    if (bus_request_pending){
		pkt_to_mp_bus = pkt_pending;
		send_DATAPKT (to_mp_bus,pkt_to_mp_bus);
		bus_request_pending=false;
	    }
	}
    }
}


/***********************/
/* Handle mpbus events */
/***********************/

void s_cache::do_mpbus_event(sim_event &ev){

    char e_type;   // Hold type of incoming event from mpbus

    SIM_CAST(p1_struct,pkt_from_mp_bus,ev);
    e_type = (char) pkt_from_mp_bus.p1_rw[0];

    switch (e_type){
    case 'r':         // read
	do_mp_rw(ev);
	break;        // write
    case 'w':
	do_mp_rw(ev);
	break;
    case 'G':         // Bus probe
	do_mp_g(ev);
	break;
    case 'P':         // Bus permission granted
	do_mp_p(ev);
	break;
    case 'S':         // Snoop probe
	do_mp_s(ev);
	break;
    case 'I':         // Invalidation details
	do_mp_i(ev);
    }
}


/*************************/
/* Handle p_cache events */
/*************************/

void s_cache::do_p_cache_event(sim_event &ev){

    int write_back; // do we need to make a write back?

    SIM_CAST(p1_struct,pkt_from_p_cache,ev);

    inst_type = pkt_from_p_cache.p1_id[0];
    add_req=pkt_from_p_cache.p1_address;

    /* Given requested address find out:            */
    /*	- its cluster memory block   (cm_block) */
    /*	- its cache slot             (slot)     */
    /*	- its cache tag              (tag)      */
		
    cm_block=(add_req/4);
    slot = cm_block % s_cache_size;
    tag = (add_req/4)/s_cache_size;
    current_line=cache[slot];
    
    /* Now classify the action read/write */
    
    action = (char) pkt_from_p_cache.p1_rw[0];
    
    /********/
    /* READ */
    /********/

    if (action=='r') {

	/* Read cycle - check for existing cache entry */
	/* check for validity and tag match            */
 
	// check if write-back is required

	if ((current_line.ca_valid != 0) && (current_line.ca_tag!=tag)){
	    write_back=need_write_back(current_line);

	    if (write_back != 0)  wb_pending=true;

	    if (wb_pending){
		wb_pkt_pending.p1_address = old_contents;
		wb_pkt_pending.p1_rw[0]   = 'u';  // write-update mode.
		wb_pkt_pending.p1_id[0]   = 'd';  // must be data!
	    }
	}
	status0='R';
	if (current_line.ca_valid==0){
	    /*invalid cache line therefore fetch.. */
	    refer=true;
	    status1='M';
	}else{
	    
	    /*valid cache line - now check tag */
	    if (current_line.ca_tag!=tag){
      		/* tag mismatch - refer */
		refer=true;
		status1='M';
	    }else{
				/* Hit!!*/
				// do nothing. return pkt later.
		status1='H';
	    }
	}
	dump_state();
    }else {
	/*********/
	/* write */
	/*********/
	
	/* do write-back if required */
	if (current_line.ca_valid!=0 && (current_line.ca_tag==tag)){
	    write_back=need_write_back(current_line);
	    if (write_back != 0){
		wb_pending=true;
	    }
	    
	    if (wb_pending){
		wb_pkt_pending.p1_address = old_contents;
		wb_pkt_pending.p1_rw[0]   = 'u';  // write-update mode.
		wb_pkt_pending.p1_id[0]   = 'd';  // must be data!
	    }
	}
	/* write cycle - write back cache */
	/* check whether write hit/miss   */
	
	if (current_line.ca_valid==0){
	    
	    /*invalid cache line therefore fetch.. */
	    refer=true;
	    status0='W';
	    status1='M';
	    dump_state();
	}else{
	    /*valid cache line - now check tag */
	    if (current_line.ca_tag!=tag){
		
		/* tag mismatch - refer */
		refer=true;
		status0='W';
		status1='M';
		dump_state();
	    }else{

		/* Hit!! - modified 19/8/95 - for snoopy invalidation signals */
		refer=false;
		status0='W';
		status1='H';
		dump_state();

		if (current_line.ca_share==1){
					    // other caches to be invalidated
		    send_invalidate(pkt_from_p_cache);
		}else{
		    // set exclusive modified
		    old_contents = cache.vec[slot].ca_add1;
		}
		current_line.ca_mod=1;
		current_line.ca_share=0;
		cache.Update(slot,current_line);
	    }
	}
    }
    
    /********************************/
    /* Now do hit or set up referal */
    /********************************/

    sim_hold(S_delay);

    if (action=='r'){                               /*** READ MODE ***/

	if (refer){
	    bus_request_pending = true;           /*** MISS ***/
	    pkt_pending = pkt_from_p_cache;
	}else{		                              /*** HIT. ***/	
	    pkt_to_p_cache = pkt_from_p_cache;	
	    send_DATAPKT(to_p_cache,pkt_to_p_cache);
		status0='_';
		status1='_';
		dump_state();
	}
	
    }else{                                          /*** WRITE MODE ***/
	
	if (refer){
	    /* convert write message to read */
	    /* MESI Protocol treats these writes as read then write */
	    /* p.350 PaP Paper */
	    write_m_inval_pkt = pkt_from_p_cache;
	    bus_request_pending = true;
	    pkt_pending = pkt_from_p_cache;     /*** MISS ***/
	 }
	else{                                   /*** HIT ***/
	    pkt_to_p_cache = pkt_from_p_cache;	
	    send_DATAPKT(to_p_cache,pkt_to_p_cache);
		status0='_';
		status1='_';
		dump_state();
	}
    }
}

$body

 S_delay = 2;
  s_cache_size  = 1 << S_size;
  clus_mem_size = 1 << Memory::M_size;

bus_request_pending = false;
inval_pending = false;
wb_pending = false;
			    
/* Caclulate cache tag range */

tag_boundary = (clus_mem_size / (s_cache_size*4));

/* Initialise the cache - set the state display */
/* and read in the cache meory file from disk.   */
 
// if global init_cache set clear me to all zeros regardless of file contents
 // init_cache no longer used, reset at start of simulation regardless
// if(init_cache != 0){
     current_line.ca_valid=0;
     current_line.ca_tag=0;
     current_line.ca_cm_block=0;
     current_line.ca_add1=0;
     current_line.ca_add2=0;		
     current_line.ca_add3=0;
     current_line.ca_add4=0;
     current_line.ca_mod=0;
     current_line.ca_share=0;

     for (count=0;count<s_cache_size;count++){
	cache.Update(count,current_line);
//     }
 } 

 status0='_';
 status1='_';
 dump_state();

while ((nodes_done<=3) && (Max_Time_Left >=0))
 {

    /* Point of reference to event list for this entity */

   if (sim_waiting(ev, SIM_ANY)<=0) {
	sim_hold(1);
	continue;
   }

    /* Classify Event */

    if (ev.scheduled_by()==from_p_cache.get_dest()){
	do_p_cache_event(ev);          // Deal with P_cache events.
    }else{
        refer=false;
	do_mpbus_event(ev);            // Deal with MPbus events.
    }
}








