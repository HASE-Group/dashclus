// 
// Dashcluster Mpbus arbitor - stage 1/3 in bus 'pipeline'
//
// lmw@dcs    8/95
//         16/8/95 - support the snoopy protocol (MESI)
//
//

// 12/95 - Support for some aspects of MOESI 2nd protocol added.
// From p.41 of Lenoski's thesis - READ REQUEST FLOWS:
//
// Type A. Home request to Uncached / Shared-Remote Block
//
// Type B. Home request to dirty-remote block
//
//

$class_decls


// packets

typedef enum{FALSE,TRUE} Bool;
p1_struct pkt_poll;            // General purpose pkt used for polling
p1_struct pkt_from_mips[4];    // Stores the poll responses of nodes
p1_struct snoop_from_mips[4];  // stores snoop responses
p2_struct pkt_to_add_stage;    // Pkt to be forwarded to address t/fer p/line stage.
p2_struct pkt_probe_add;       // Pkt used for probing address t/fer stage
p2_struct pkt_from_add_stage;  // Pkt containing info from address stage
//p3_struct pkt_from_dir_unit;   // Pkt used to give cluster no to bus arb.
//p3_struct pkt_to_dir_ctrl;     // Pkt to send state updates to dir_ctrl
    p1_struct checkup_pkt;

// variables

    Bool wb;   // case 2 write back flag
    Bool remote_access; // is remote access required flag
    Bool serviced;
    Bool invalidate;

    int count;
    int i;
    int Bus_arb_delay;
    int time, max_time;

int current_master;         // ID of current active bus master
int before_invalidate;      // ID of previous active bus master
int c_m_low;                // Lower bound of address range for this cluster.
int c_m_hi;                 // Upper ''                                  ''.
int  do_snoop(p2_struct,char);
void poll_all();                 // Polls all nodes re: 'require use of bus?'
void get_poll_resp();            // Gathers poll responses
int  process_census();           // Processes poll result
int  grant_bus();                // Grants bus to appropriate (r-robin) master
void get_master_data(int);       // Received data from active master
void do_state_update(int);       // animate round robin
void snoop_probe(p2_struct,char); // Send out snoop info to all caches in cluster
int  snoop_census(char);         // Gather stats on last snoop
void check_invalidate();
void clear_state();              // clears state information panel

int masters_waiting;
int granted;

$class_defs

void bus_arb::clear_state(){

    strcpy(n1_snoop,"----");
    strcpy(n2_snoop,"----");
    strcpy(n3_snoop,"----");
    strcpy(n4_snoop,"----");
    strcpy(action,"---");
    strcpy(data_source,"---");
}

int bus_arb::snoop_census(char rw_mode){

    int answer;
    answer=0;

    int ni,eu,su,em;     // counts for new versions of status bits
    int oi,oeu,osu,oem; // counts for ols versions of status bits
    ni=0; eu=0; su=0; em=0;
    oi=0; oeu=0; osu=0; oem=0;
    
    /* decide what the outcome of a snoop was */
    /* return codes :                         */
    /*      1: read from memory               */
    /*      2: read from another cache        */
    /*      3: read from other cache and WB   */

    for (count=0;count<4;count++){
	if (snoop_from_mips[count].p1_id[0]=='I') {ni++;}
	if (snoop_from_mips[count].p1_id[0]=='S') {su++;}
	if (snoop_from_mips[count].p1_id[0]=='E'){
	    if (snoop_from_mips[count].p1_id[1]=='U') {eu++;}
	    else {em++;}
	}
	if (snoop_from_mips[count].p1_id[3]=='I') {oi++;}
	if (snoop_from_mips[count].p1_id[3]=='S') {osu++;}
	if (snoop_from_mips[count].p1_id[3]=='E'){
	    if (snoop_from_mips[count].p1_id[4]=='U') {oeu++;}
	    else {oem++;}
	}
    }

    if (rw_mode=='r'){   // for snoop on read
	
	if (ni==4) {answer=1;}           // take from memory - no cached copies
	if (su>0 && oem==0) {answer=2;} // take copy from cache (case a)
	if (oem>0) {answer=3;}          // take copy from cache-wb (case b)

    }else{               // for snoop on write operation
	
    }
    return answer;
}

void bus_arb::snoop_probe(p2_struct pkt_in, char rw_mode){

/* this routine echos any memory requests back to all 2nd level caches */
/* in a given cluster - it is the snoop phase                          */


    checkup_pkt.p1_address = pkt_in.p2_address;  // Address we are snooping
    checkup_pkt.p1_rw[0]   = 'S';                // 'S'noop
    checkup_pkt.p1_id[0]   = ' ';                // blank
    checkup_pkt.p1_rw[1]   = rw_mode;

    sim_schedule(from_mips1,0,DATAPKT,SIM_PUT(p1_struct,checkup_pkt));
    sim_schedule(from_mips2,0,DATAPKT,SIM_PUT(p1_struct,checkup_pkt));
    sim_schedule(from_mips3,0,DATAPKT,SIM_PUT(p1_struct,checkup_pkt));
    sim_schedule(from_mips4,0,DATAPKT,SIM_PUT(p1_struct,checkup_pkt));
}

int bus_arb::do_snoop(p2_struct line_checkup,char rw_mode){
//>>>D
    sim_event ev;
    int snoop_action;

    snoop_probe(line_checkup,rw_mode);

    /* now get snoop probe response */

    for (count=0;count<4;count++){
	sim_get_next(ev);
	if (ev.scheduled_by()==from_mips1.get_dest()){
	    SIM_CAST(p1_struct,snoop_from_mips[0],ev);
	}
	else if (ev.scheduled_by()==from_mips2.get_dest()){
	    SIM_CAST(p1_struct,snoop_from_mips[1],ev);
	}
	else if (ev.scheduled_by()==from_mips3.get_dest()){
	    SIM_CAST(p1_struct,snoop_from_mips[2],ev);
	}
	else if (ev.scheduled_by()==from_mips4.get_dest()){
	    SIM_CAST(p1_struct,snoop_from_mips[3],ev);
	}
    }

    /* now update snoop display panel with response data */

    strcpy (n1_snoop,snoop_from_mips[0].p1_id);
    strcpy (n2_snoop,snoop_from_mips[1].p1_id);
    strcpy (n3_snoop,snoop_from_mips[2].p1_id);
    strcpy (n4_snoop,snoop_from_mips[3].p1_id);

    /* ok now we can make decision whether to take from memory or cache */
    /* based on the results of this poll - process poll data now.....   */

    return snoop_census(rw_mode);
}

void bus_arb::do_state_update(int live_input){

    input1='-';
    input2='-';
    input3='-';
    input4='-';

    switch (live_input){
    case 1: 
	input1='<';
	break;
    case 2: 
	input2='<';
	break;
    case 3: 
	input3='<';
	break;
    case 4: 
	input4='<';
	break;
    }
    dump_state();
}

void bus_arb::get_master_data(int master){

    count =0;
//>>>D
    sim_event ev;
    int snoop_res;
    int dir_clus_id; // holds cluster number for directory memory updates

    remote_access = FALSE;
    wb=FALSE;                       // wb initialy false
//    pkt_to_add_stage.p2_id[2]=' ';  // clear pkt to add units wb flag

    master--;

    sim_get_next(ev);

    SIM_CAST(p1_struct,pkt_from_mips[master],ev);

    pkt_to_add_stage.p2_address = pkt_from_mips[master].p1_address;
    strcpy(pkt_to_add_stage.p2_rw, pkt_from_mips[master].p1_rw);
    strcpy(pkt_to_add_stage.p2_id, pkt_from_mips[master].p1_id);

    pkt_to_add_stage.p2_dev_id  = master;

    /* make check NOW for invalidate signal - if so take different */
    /* course of action */

    if (pkt_to_add_stage.p2_id[0]=='!'){  // found signal for invalidate

	clear_state();
	strcpy(n1_snoop,"SEND");
	strcpy(n2_snoop,"INV'DATE");
	strcpy(n3_snoop,"TO");
	strcpy(n4_snoop,"CACHES");
	dump_state_i();

	// now send invalidate signal to all caches
	// EXCEPT the one sending invalidate

	strcpy(pkt_from_mips[master].p1_rw, "I");
	if (master != 0)
		send_DATAPKT(to_mips1a,pkt_from_mips[master],17,1);
	if (master != 1)
		send_DATAPKT(to_mips2a,pkt_from_mips[master],17,1);
	if (master != 2)
		send_DATAPKT(to_mips3a,pkt_from_mips[master],17,1);
	if (master != 3)
		send_DATAPKT(to_mips4a,pkt_from_mips[master],17,1);

	bus_busy_mutex.Lock();
         bus_busy = 0;
	dump_globals();
	bus_busy_mutex.Unlock();

	dump_state();
	sim_hold(Bus_arb_delay);
	
	// set state
	my_state=IDLE;
	dump_state();

	current_master = 1+(current_master%4); 
	if (before_invalidate!=-1)
	    current_master=before_invalidate;
	before_invalidate=-1;
    }else{

	// snoop activity

	if (pkt_to_add_stage.p2_rw[0]=='r'){
	    strcpy(action,"READ");
	}else{
	    if (pkt_to_add_stage.p2_rw[0]=='w'){
		strcpy(action,"WRITE");
	    }else{
		strcpy(action,"W'BACK");
	    }
	}
	
	snoop_res = do_snoop(pkt_to_add_stage,pkt_to_add_stage.p2_rw[0]);
	
	if (pkt_to_add_stage.p2_rw[0]=='r'){
	    switch (snoop_res){
	    case 1: strcpy (pkt_to_add_stage.p2_id,"EU");
		if (pkt_to_add_stage.p2_address < c_m_low || pkt_to_add_stage.p2_address > c_m_hi){
		    strcpy (data_source,"R_MEM-");
		    remote_access = TRUE;
		}else{
		    strcpy (data_source,"MEMORY");
		}
		break;

	    case 2: strcpy (pkt_to_add_stage.p2_id,"SU");
		strcpy (data_source,"CACHE");
	    break;

	    case 3: strcpy (pkt_to_add_stage.p2_id,"SU");
		strcpy (data_source,"CAC/WB");
		wb=TRUE;
		break;
	    }
	}

	if (pkt_to_add_stage.p2_rw[0]=='u'){
		strcpy (data_source,"");
		wb=TRUE;
            }

	dump_state();
	sim_hold(Bus_arb_delay);

	// set state
	my_state=IDLE;
	dump_state();

	// UPDATE THE DIRECTORY MEMORY
	// 
	// Case 1: Read from local memory

	if (remote_access){        // if local access set dir clus id approp.
	    dir_clus_id=0; 
	}

	// only update directory memory for remote copies of local data

	    // now tell add unit we are ready to send ( a local access)
	
	    pkt_probe_add.p2_address = -1;
	    pkt_probe_add.p2_rw[0]   = 'G';
	    pkt_probe_add.p2_id[0]   = -1;
	    pkt_probe_add.p2_dev_id  = -1;
	    
	    sim_schedule(to_add_unit,0,BUSPKT,SIM_PUT(p2_struct,pkt_probe_add));
	    
	    sim_get_next(ev);
	    SIM_CAST(p2_struct,pkt_from_add_stage,ev);
	    
	    // now send out pkt
	    
	    /* if case b. (see docs) writeback needed then include flag in     */
	    /* outgoing message. We need to find * flag in only one snoop pkt. */
	
	    if (wb){
		sprintf(pkt_to_add_stage.p2_id, "%c%c*", pkt_to_add_stage.p2_id[0], pkt_to_add_stage.p2_id[1]);
	    }
	    send_BUSPKT(to_add_unit,pkt_to_add_stage);
	    current_master = 1+(current_master%4); 
	    if (before_invalidate!=-1)
	        current_master=before_invalidate;
	    before_invalidate=-1;
    }
}

int bus_arb::grant_bus(){

    invalidate = FALSE;
    serviced=FALSE;
    //check for invalidates
    for (i=0;i<4;i++) 
	if (pkt_from_mips[i].p1_address == -2) {
	    before_invalidate = current_master;
	    invalidate = TRUE;
	}
	
    while (!serviced){
	if ((pkt_from_mips[current_master-1].p1_rw[0]=='Y') && 
	    (((invalidate==TRUE) && 
	      (pkt_from_mips[current_master-1].p1_address==-2)) ||
             ((invalidate==FALSE) &&
	      (pkt_from_mips[current_master-1].p1_address==-1)))) { 
	    
	    pkt_poll.p1_address = -1;
	    pkt_poll.p1_rw[0]   = 'P';
	    pkt_poll.p1_id[0]   = ' ';
	    switch (current_master){
	    case 1: 
		sim_schedule(from_mips1,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
		my_state=NODE1;
		break;
	    case 2: 
		sim_schedule(from_mips2,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
		my_state=NODE2;
		break;
	    case 3: 
		sim_schedule(from_mips3,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
		my_state=NODE3;
		break;
	    case 4: 
		sim_schedule(from_mips4,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
		my_state=NODE4;
		break;
	    }
	    serviced=TRUE;
	    do_state_update(current_master);
	}
	else{
	     current_master = 1+(current_master%4);
	    }
    }
    return current_master;
}

int bus_arb::process_census(){
//>>>D
    sim_event ev;  

    int answer = 0;
    
    // act on action types

    for (count=0;count<4;count++){
	if (pkt_from_mips[count].p1_rw[0]=='Y'){
	    answer++;
	}
    }
    return answer;
}

void bus_arb::get_poll_resp(){
//>>>D
    sim_event ev;
    
    for (count=0;count<4;count++){
	sim_get_next(ev);
	if (ev.scheduled_by()==from_mips1.get_dest()){
	    SIM_CAST(p1_struct,pkt_from_mips[0],ev);
	}
	if (ev.scheduled_by()==from_mips2.get_dest()){
	    SIM_CAST(p1_struct,pkt_from_mips[1],ev);
	}
	if (ev.scheduled_by()==from_mips3.get_dest()){
	    SIM_CAST(p1_struct,pkt_from_mips[2],ev);
	}
	if (ev.scheduled_by()==from_mips4.get_dest()){
	    SIM_CAST(p1_struct,pkt_from_mips[3],ev);
	}
    }
}

void bus_arb::poll_all(){

    // define poll packet

    pkt_poll.p1_address = -1;
    pkt_poll.p1_rw[0]   = 'G';
    pkt_poll.p1_id[0]   = ' ';

    sim_schedule(from_mips1,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
    sim_schedule(from_mips2,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
    sim_schedule(from_mips3,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
    sim_schedule(from_mips4,0,DATAPKT,SIM_PUT(p1_struct,pkt_poll));
}

$body

Bus_arb_delay = 1;
max_time = Max_Time_Left;
current_master =1;
granted =-1;

/* initialise state information */

input1='-';
input2='-';
input3='-';
input4='-';
clear_state();
dump_state();
my_state=IDLE;
before_invalidate=-1;
c_m_hi = 1023;
c_m_low  = 0;

bus_busy=0;

while ((nodes_done < 4) && (Max_Time_Left >=0))
 {    
    if (bus_busy == 0)
	{
    	 masters_waiting = 0;
    	 poll_all();
    	 get_poll_resp();
    	 masters_waiting = process_census();
    	 if (masters_waiting > 0)
	   {
	    bus_busy_mutex.Lock();
            bus_busy = 1;
	   dump_globals();
	   bus_busy_mutex.Unlock();
	    granted = grant_bus();
	    get_master_data(granted);	// get data pkt from granted mips
	   }
	 else
	   {sim_hold(Bus_arb_delay);}   
         my_state=IDLE;
	}
     else {sim_hold(Bus_arb_delay);}
     time = sim_clock();
     Max_Time_Left =  max_time - time;
     dump_globals();
     dump_state();
 }


my_state=STOPPED;
dump_state();

$report

time = sim_clock();
printf("Simulation stopping, %d MIPS have completed their tasks at time %d \n", nodes_done, time);

