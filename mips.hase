//
// Project:	DASH Cluster
// Entity:	Processor
// File:	mips.hase
// Date:	2 Nov 2001

// Originally Written by Lawrence Williams
// Later modified by Roland Ibbett

// GLOBALS for this entity are as follows:
//    TC     - Psuedo Program Counter - Trace file index Counter
//    traces - Number of trace file entries to be used this run (0-100)
//    


$class_defs

$class_decls

// Variable Declarations

  mem_trace_struct trace_file_line;      // Holds a line of the trace file.
  p1_struct pkt_to_p_cache;              // Packet bound for p_cache.
  char action;
  int MIPS_delay;
  int max_address;
  bool error;

$body

  MIPS_delay = 2;
  TC = 0;
  max_address = 1 << Memory::M_size;

// Main Body code; generate addresses, from mem_trace file.

  error = false;
  action = 'r';
  my_state=M_RUNNING;

while ((action != 'z') && (nodes_done < 4) && (Max_Time_Left >=0))
{
	// update state info 

	dump_state();

	// model processor delay 

	sim_hold(MIPS_delay);

	// load next line of trace file in 

	trace_file_line = mem_trace[TC];  
	action = trace_file_line.mt_rw[0];

	// set up and send the request for the address found 
        // in the trace file line. First stop primary cache! 

	pkt_to_p_cache.p1_address = trace_file_line.mt_address;
        strcpy(pkt_to_p_cache.p1_rw,  trace_file_line.mt_rw);
	strcpy(pkt_to_p_cache.p1_id, trace_file_line.mt_id);

	// check address for NOP value of -1     
        // used to skip through input trace file 

	if (pkt_to_p_cache.p1_address > max_address
	  || pkt_to_p_cache.p1_address < 0)
	 {
	  error = true;
	 }

	else if ((pkt_to_p_cache.p1_address!=-1) && (action != 'z'))
	{
	    send_DATAPKT(to_p_cache,pkt_to_p_cache);
	    my_state=M_WAITING;
	    dump_state();

	    sim_wait(ev);
	}
	my_state=M_RUNNING;
	dump_state();
	TC ++;
} 

// Now flag the bus that this processor is done - this is the
// method of 'turning off' the bus when the traces have finished
// otherwise the bus poll mechanism will generate 'poll' events
// for ever (therefore the simulation will never finish!).

  my_state=M_STOPPED;
  nodes_done_mutex.Lock();
  nodes_done++;
  dump_globals();
  nodes_done_mutex.Unlock();

  dump_state();

$report

  if(error)
   {printf("mem_trace %d contains an invalid memory address (%d)\n", TC, pkt_to_p_cache.p1_address);}
